//@version=4
study("Auto Fib Retracement (Price Format)", overlay=true)

// pivots threshold
threshold_multiplier = input(title="Deviation", type=input.float, defval=3, minval=0)
dev_threshold = atr(10) / close * 100 * threshold_multiplier

depth = input(title="Depth", type=input.integer, defval=10, minval=1)
var extendLeft = input(title="Extend Lines Left", type=input.bool, defval=false)
var extendRight = input(title="Extend Lines Right", type=input.bool, defval=true)

var extending = extend.none
if extendLeft and extendRight
    extending := extend.both
if extendLeft and not extendRight
    extending := extend.left
if not extendLeft and extendRight
    extending := extend.right

reverse = input(title="Reverse", type=input.bool, defval=false)
prices = input(title="Prices", type=input.bool, defval=true)
formatDecOpt = input(title="Price Format", defval="Auto", options = ["Auto", "#.##", "#.###", "#.####", "#.#####", "#.######", "#.#######", "#.########"])
levels = input(title="Levels", type=input.bool, defval=true)
levelsFormat = input(title="Levels Format", defval="Values", options = ["Values", "Percent"])
labelsPosition = input(title="Labels Position", defval="Left", options = ["Left", "Right"])

var line lineLast = na
var int iLast = 0
var int iPrev = 0
var float pLast = 0
var isHighLast = false // otherwise the last pivot is a low pivot

pivots(src, length, isHigh) =>
    l2 = length * 2
    c = nz(src[length])
    ok = true
    for i = 0 to l2
        if isHigh and src[i] > c
            ok := false

        if not isHigh and src[i] < c
            ok := false
    if ok
        [bar_index[length], c]
    else
        [int(na), float(na)]
[iH, pH] = pivots(high, depth / 2, true)
[iL, pL] = pivots(low, depth / 2, false)

calc_dev(base_price, price) =>
    100 * (price - base_price) / price

pivotFound(dev, isHigh, index, price) =>
    if isHighLast == isHigh and not na(lineLast)
        // same direction
        if isHighLast ? price > pLast : price < pLast
            line.set_xy2(lineLast, index, price)
            [lineLast, isHighLast]
        else
            [line(na), bool(na)]
    else // reverse the direction (or create the very first line)
        if abs(dev) > dev_threshold
            // price move is significant
            id = line.new(iLast, pLast, index, price, color=color.gray, width=1, style=line.style_dashed)
            [id, isHigh]
        else
            [line(na), bool(na)]

if not na(iH)
    dev = calc_dev(pLast, pH)
    [id, isHigh] = pivotFound(dev, true, iH, pH)
    if not na(id)
        if id != lineLast
            line.delete(lineLast)
        lineLast := id
        isHighLast := isHigh
        iPrev := iLast
        iLast := iH
        pLast := pH
else
    if not na(iL)
        dev = calc_dev(pLast, pL)
        [id, isHigh] = pivotFound(dev, false, iL, pL)
        if not na(id)
            if id != lineLast
                line.delete(lineLast)
            lineLast := id
            isHighLast := isHigh
            iPrev := iLast
            iLast := iL
            pLast := pL

_draw_line(price, col) =>
    var id = line.new(iLast, price, bar_index, price, color=col, width=1, extend=extending)
    if not na(lineLast)
        line.set_xy1(id, line.get_x1(lineLast), price)
        line.set_xy2(id, line.get_x2(lineLast), price)


_draw_label(price, txt, txtColor) =>
    x = labelsPosition == "Left" ? line.get_x1(lineLast) : not extendRight ? line.get_x2(lineLast) : bar_index
    labelStyle = labelsPosition == "Left" ? label.style_label_right : label.style_label_left
    align = labelsPosition == "Left" ? text.align_right : text.align_left
    labelsAlignStrLeft = txt + '\n ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏ \n'
    labelsAlignStrRight = '       ' + txt + '\n ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏ \n'
    labelsAlignStr = labelsPosition == "Left" ? labelsAlignStrLeft : labelsAlignStrRight
    var id = label.new(x=x, y=price, text=labelsAlignStr, textcolor=txtColor, style=labelStyle, textalign=align, color=#00000000)
    label.set_xy(id, x, price)
    label.set_text(id, labelsAlignStr)
    label.set_textcolor(id, txtColor)

numOfDgts(n) =>
    float dx = 0
    dx := abs(n)
    dx := dx - floor(dx)
	int ret = 0
    for i = 0 to 42
        if (dx == 0)
            break
        dx := dx * 10
        dx := dx - floor(round(dx))
        ret := ret + 1
    ret

getFormat(_src) =>
    num = numOfDgts(_src)
    ret = "#.##"
    if num <= 2
        ret := "#.##"
    else if num == 3
        ret := "#.###"
    else if num == 4
        ret := "#.####"
    else if num == 5
        ret := "#.#####"
    else if num == 6
        ret := "#.######"
    else if num == 7
        ret := "#.#######"
    else if num >= 8
        ret := "#.########"
    ret

//label.new(bar_index, high, text=tostring(numOfDgts(close)))

_wrap(txt) =>
    formatDec = formatDecOpt == "Auto" ? getFormat(close) : formatDecOpt
    //"(" + tostring(txt, "#.##") + ")"
    "(" + tostring(txt, formatDec) + ")"

_label_txt(level, price) =>
    l = levelsFormat == "Values" ? tostring(level) : tostring(level * 100) + "%"
    (levels ? l : "") + (prices ? _wrap(price) : "")

_crossing_level(sr, r) =>
    (r > sr and r < sr[1]) or (r < sr and r > sr[1])

startPrice = reverse ? line.get_y1(lineLast) : pLast
endPrice = reverse ? pLast : line.get_y1(lineLast)

iHL = startPrice > endPrice
diff = (iHL ? -1 : 1) * abs(startPrice - endPrice)

level_0 = input(defval=true, type=input.bool, title="0")
color_0 = input(defval=#787b86, type=input.color, title="0 Level Color")
float m = 0
r = startPrice + diff * m
if level_0
    _draw_line(r, color_0)
    _draw_label(r, _label_txt(m, r), color_0)
alertcondition(_crossing_level(close, r), "Autofib 0 crossing!", "Autofib: {{ticker}} crossing level 0.")


//custom levels added 

level_033 = input(defval=true, type=input.bool, title="0.33")
color_033 = input(defval=#f44336, type=input.color, title="0.33 Level Color")
m := 0.33
r := startPrice + diff * m
if level_033
    _draw_line(r, color_033)
    _draw_label(r, _label_txt(m, r), color_033)
alertcondition(_crossing_level(close, r), "Autofib 0.33 crossing!", "Autofib: {{ticker}} crossing level 0.33.")




level_0236 = input(defval=false, type=input.bool, title="0.236")
color_0236 = input(defval=#f44336, type=input.color, title="0.236 Level Color")
m := 0.236
r := startPrice + diff * m
if level_0236
    _draw_line(r, color_0236)
    _draw_label(r, _label_txt(m, r), color_0236)
alertcondition(_crossing_level(close, r), "Autofib 0.236 crossing!", "Autofib: {{ticker}} crossing level 0.236.")

level_0382 = input(defval=false, type=input.bool, title="0.382")
color_0382 = input(defval=#81c784, type=input.color, title="0.382 Level Color")
m := 0.382
r := startPrice + diff * m
if level_0382
    _draw_line(r, color_0382)
    _draw_label(r, _label_txt(m, r), color_0382)
alertcondition(_crossing_level(close, r), "Autofib 0.382 crossing!", "Autofib: {{ticker}} crossing level 0.382.")

level_05 = input(defval=true, type=input.bool, title="0.5")
color_05 = input(defval=#820029, type=input.color, title="0.5 Level Color")
m := 0.5
r := startPrice + diff * m
if level_05
    _draw_line(r, color_05)
    _draw_label(r, _label_txt(m, r), color_05)
alertcondition(_crossing_level(close, r), "Autofib 0.5 crossing!", "Autofib: {{ticker}} crossing level 0.5.")

level_0618 = input(defval=false, type=input.bool, title="0.618")
color_0618 = input(defval=#009688, type=input.color, title="0.618 Level Color")
m := 0.618
r := startPrice + diff * m
if level_0618
    _draw_line(r, color_0618)
    _draw_label(r, _label_txt(m, r), color_0618)
alertcondition(_crossing_level(close, r), "Autofib 0.618 crossing!", "Autofib: {{ticker}} crossing level 0.618.")

level_066 = input(defval=true, type=input.bool, title="0.66")
color_066 = input(defval=#009688, type=input.color, title="0.66 Level Color")
m := 0.66
r := startPrice + diff * m
if level_066
    _draw_line(r, color_066)
    _draw_label(r, _label_txt(m, r), color_066)
alertcondition(_crossing_level(close, r), "Autofib 0.66 crossing!", "Autofib: {{ticker}} crossing level 0.66.")

level_0786 = input(defval=false, type=input.bool, title="0.786")
color_0786 = input(defval=#64b5f6, type=input.color, title="0.786 Level Color")
m := 0.786
r := startPrice + diff * m
if level_0786
    _draw_line(r, color_0786)
    _draw_label(r, _label_txt(m, r), color_0786)
alertcondition(_crossing_level(close, r), "Autofib 0.786 crossing!", "Autofib: {{ticker}} crossing level 0.786.")

level_1 = input(defval=true, type=input.bool, title="1")
color_1 = input(defval=#787b86, type=input.color, title="1 Level Color")
m := 1
r := startPrice + diff * m
if level_1
    _draw_line(r, color_1)
    _draw_label(r, _label_txt(m, r), color_1)
alertcondition(_crossing_level(close, r), "Autofib 1 crossing!", "Autofib: {{ticker}} crossing level 1.")

level_1272 = input(defval=false, type=input.bool, title="1.272")
color_1272 = input(defval=#81c784, type=input.color, title="1.272 Level Color")
m := 1.272
r := startPrice + diff * m
if level_1272
    _draw_line(r, color_1272)
    _draw_label(r, _label_txt(m, r), color_1272)
alertcondition(_crossing_level(close, r), "Autofib 1.272 crossing!", "Autofib: {{ticker}} crossing level 1.272.")

level_1414 = input(defval=false, type=input.bool, title="1.414")
color_1414 = input(defval=#f44336, type=input.color, title="1.414 Level Color")
m := 1.414
r := startPrice + diff * m
if level_1414
    _draw_line(r, color_1414)
    _draw_label(r, _label_txt(m, r), color_1414)
alertcondition(_crossing_level(close, r), "Autofib 1.414 crossing!", "Autofib: {{ticker}} crossing level 1.414.")

level_1618 = input(defval=false, type=input.bool, title="1.618")
color_1618 = input(defval=#2196f3, type=input.color, title="1.618 Level Color")
m := 1.618
r := startPrice + diff * m
if level_1618
    _draw_line(r, color_1618)
    _draw_label(r, _label_txt(m, r), color_1618)
alertcondition(_crossing_level(close, r), "Autofib 1.618 crossing!", "Autofib: {{ticker}} crossing level 1.618.")

level_165 = input(defval=false, type=input.bool, title="1.65")
color_165 = input(defval=#2196f3, type=input.color, title="1.65 Level Color")
m := 1.65
r := startPrice + diff * m
if level_165
    _draw_line(r, color_165)
    _draw_label(r, _label_txt(m, r), color_165)
alertcondition(_crossing_level(close, r), "Autofib 1.65 crossing!", "Autofib: {{ticker}} crossing level 1.65.")

level_2618 = input(defval=false, type=input.bool, title="2.618")
color_2618 = input(defval=#f44336, type=input.color, title="2.618 Level Color")
m := 2.618
r := startPrice + diff * m
if level_2618
    _draw_line(r, color_2618)
    _draw_label(r, _label_txt(m, r), color_2618)
alertcondition(_crossing_level(close, r), "Autofib 2.618 crossing!", "Autofib: {{ticker}} crossing level 2.618.")

level_265 = input(defval=false, type=input.bool, title="2.65")
color_265 = input(defval=#f44336, type=input.color, title="2.65 Level Color")
m := 2.65
r := startPrice + diff * m
if level_265
    _draw_line(r, color_265)
    _draw_label(r, _label_txt(m, r), color_265)
alertcondition(_crossing_level(close, r), "Autofib 2.65 crossing!", "Autofib: {{ticker}} crossing level 2.65.")

level_3618 = input(defval=false, type=input.bool, title="3.618")
color_3618 = input(defval=#9c27b0, type=input.color, title="3.618 Level Color")
m := 3.618
r := startPrice + diff * m
if level_3618
    _draw_line(r, color_3618)
    _draw_label(r, _label_txt(m, r), color_3618)
alertcondition(_crossing_level(close, r), "Autofib 3.618 crossing!", "Autofib: {{ticker}} crossing level 3.618.")

level_365 = input(defval=false, type=input.bool, title="3.65")
color_365 = input(defval=#9c27b0, type=input.color, title="3.65 Level Color")
m := 3.65
r := startPrice + diff * m
if level_365
    _draw_line(r, color_365)
    _draw_label(r, _label_txt(m, r), color_365)
alertcondition(_crossing_level(close, r), "Autofib 3.65 crossing!", "Autofib: {{ticker}} crossing level 3.65.")

level_4236 = input(defval=false, type=input.bool, title="4.236")
color_4236 = input(defval=#e91e63, type=input.color, title="4.236 Level Color")
m := 4.236
r := startPrice + diff * m
if level_4236
    _draw_line(r, color_4236)
    _draw_label(r, _label_txt(m, r), color_4236)
alertcondition(_crossing_level(close, r), "Autofib 4.236 crossing!", "Autofib: {{ticker}} crossing level 4.236.")

level_n0236 = input(defval=false, type=input.bool, title="-0.236")
color_n0236 = input(defval=#f44336, type=input.color, title="-0.236 Level Color")
m := -0.236
r := startPrice + diff * m
if level_n0236
    _draw_line(r, color_n0236)
    _draw_label(r, _label_txt(m, r), color_n0236)
alertcondition(_crossing_level(close, r), "Autofib -0.236 crossing!", "Autofib: {{ticker}} crossing level -0.236.")

level_n0382 = input(defval=false, type=input.bool, title="-0.382")
color_n0382 = input(defval=#81c784, type=input.color, title="-0.382 Level Color")
m := -0.382
r := startPrice + diff * m
if level_n0382
    _draw_line(r, color_n0382)
    _draw_label(r, _label_txt(m, r), color_n0382)
alertcondition(_crossing_level(close, r), "Autofib -0.382 crossing!", "Autofib: {{ticker}} crossing level -0.382.")

level_n0618 = input(defval=false, type=input.bool, title="-0.618")
color_n0618 = input(defval=#009688, type=input.color, title="-0.618 Level Color")
m := -0.618
r := startPrice + diff * m
if level_n0618
    _draw_line(r, color_n0618)
    _draw_label(r, _label_txt(m, r), color_n0618)
alertcondition(_crossing_level(close, r), "Autofib -0.618 crossing!", "Autofib: {{ticker}} crossing level -0.618.")

level_n065 = input(defval=false, type=input.bool, title="-0.65")
color_n065 = input(defval=#009688, type=input.color, title="-0.65 Level Color")
m := -0.65
r := startPrice + diff * m
if level_n065
    _draw_line(r, color_n065)
    _draw_label(r, _label_txt(m, r), color_n065)
alertcondition(_crossing_level(close, r), "Autofib -0.65 crossing!", "Autofib: {{ticker}} crossing level -0.65.")
